{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name tetris.view, :imports nil, :requires {r reagent.core, reagent.core reagent.core, tetris.game tetris.game}, :uses {transpose tetris.game, app-state tetris.game}, :defs {block {:protocol-inline nil, :meta {:file "/home/joakim/Workspace/clojure/tetris/src/tetris/view.cljs", :line 5, :column 7, :end-line 5, :end-column 12, :arglists (quote ([x y color]))}, :name tetris.view/block, :variadic false, :file "/home/joakim/Workspace/clojure/tetris/src/tetris/view.cljs", :end-column 12, :method-params ([x y color]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 5, :end-line 5, :max-fixed-arity 3, :fn-var true, :arglists (quote ([x y color]))}, tetris {:protocol-inline nil, :meta {:file "/home/joakim/Workspace/clojure/tetris/src/tetris/view.cljs", :line 16, :column 7, :end-line 16, :end-column 13, :arglists (quote ([{:keys [piece x y block-pile color pause? done? score], :as world}]))}, :name tetris.view/tetris, :variadic false, :file "/home/joakim/Workspace/clojure/tetris/src/tetris/view.cljs", :end-column 13, :method-params ([p__47028]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 16, :end-line 16, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [piece x y block-pile color pause? done? score], :as world}]))}, root-view {:protocol-inline nil, :meta {:file "/home/joakim/Workspace/clojure/tetris/src/tetris/view.cljs", :line 46, :column 7, :end-line 46, :end-column 16, :arglists (quote ([]))}, :name tetris.view/root-view, :variadic false, :file "/home/joakim/Workspace/clojure/tetris/src/tetris/view.cljs", :end-column 16, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 46, :end-line 46, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}}, :require-macros {r reagent.core, reagent.core reagent.core}, :cljs.analyzer/constants {:seen #{:y :rx :stroke :color :key :font-size :piece :stroke-opacity :fill :done? :background-color :margin-top :width :h1#header :flex :on-click :column :center :style :div :stroke-width :score :a#ghlink :justify-content :svg :display :x :block-pile :viewBox :border-radius :rect :pause? :href :font-family :flex-direction :height :text}, :order [:rect :y :rx :stroke :stroke-opacity :fill :width :stroke-width :x :height :piece :block-pile :color :pause? :done? :score :div :style :display :justify-content :svg :viewBox :on-click :border-radius :background-color :key :text :font-size :font-family :flex-direction :flex :column :center :h1#header :margin-top :a#ghlink :href]}, :doc nil}